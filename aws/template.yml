AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Asynchronous RAG Pipeline with File Processing

Globals:
  Function:
    Timeout: 600

Parameters:
  StackName:
    Type: String
    Default: rag-app
    Description: Name of the CloudFormation stack

Resources:
  # IAM Role for Lambda functions
  ProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: DynamoAccess #AndOpenSearchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # - Effect: Allow
              #   Action: ['aoss:*']
              #   Resource: '*'
              - Effect: Allow
                Action: ['dynamodb:*']
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProcessingStatusTable}'
              - Effect: Allow
                Action: ['lambda:InvokeFunction']
                Resource: 
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
              - Effect: Allow
                Action: ['ecs:RunTask', 'ecs:DescribeTasks']
                Resource: '*'
              - Effect: Allow
                Action: ['iam:PassRole']
                Resource: '*'

  # S3 Bucket for raw file uploads
  RawFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: ExpireAfter7Days
            Status: Enabled
            ExpirationInDays: 7
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  # S3 Bucket for extracted assets
  AssetsBucket:
    Type: AWS::S3::Bucket

  # DynamoDB Table for processing status
  ProcessingStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: document_key
          AttributeType: S
      KeySchema:
        - AttributeName: document_key
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

# OpenSearch Serverless Encryption Policy
# EncryptionSecurityPolicy:
#   Type: AWS::OpenSearchServerless::SecurityPolicy
#   Properties:
#     Name: rag-encryption-policy
#     Type: encryption
#     Policy: !Sub |
#       {
#         "Rules": [
#           {
#             "Resource": ["collection/rag-vector-collection"],
#             "ResourceType": "collection"
#           }
#         ],
#         "AWSOwnedKey": true
#       }

# OpenSearch Serverless Network Policy
# NetworkSecurityPolicy:
#   Type: AWS::OpenSearchServerless::SecurityPolicy
#   Properties:
#     Name: rag-network-policy
#     Type: network
#     Policy: !Sub |
#       [
#         {
#           "Rules": [
#             {
#               "Resource": ["collection/rag-vector-collection"],
#               "ResourceType": "collection"
#             }
#           ],
#           "AllowFromPublic": true
#         }
#       ]

# OpenSearch Serverless Access Policy
# CollectionAccessPolicy:
#   Type: AWS::OpenSearchServerless::AccessPolicy
#   Properties:
#     Name: rag-collection-access-policy
#     Type: data
#     Policy: !Sub |
#       [{
#         "Rules": [
#           {
#             "Resource": ["collection/rag-vector-collection"],
#             "Permission": ["aoss:CreateCollectionItems"],
#             "ResourceType": "collection"
#           },
#           {
#             "Resource": ["index/rag-vector-collection/*"],
#             "Permission": ["aoss:CreateIndex", "aoss:DeleteIndex", "aoss:UpdateIndex", "aoss:DescribeIndex", "aoss:ReadDocument", "aoss:WriteDocument"],
#             "ResourceType": "index"
#           }
#         ],
#         "Principal": ["${ProcessingLambdaRole.Arn}"]
#       }]

# OpenSearch Serverless Collection
# RagVectorCollection:
#   Type: AWS::OpenSearchServerless::Collection
#   DependsOn:
#     - EncryptionSecurityPolicy
#     - NetworkSecurityPolicy
#     - CollectionAccessPolicy
#   Properties:
#     Name: rag-vector-collection
#     Type: VECTORSEARCH
#     Description: Vector collection for RAG application

  # Step Functions State Machine
  IngestionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: "RAG Document Processing State Machine"
        StartAt: UpdateStatusProcessing
        States:
          UpdateStatusProcessing:
            Type: Task
            Resource: !GetAtt StatusUpdaterFunction.Arn
            Parameters:
              status: processing
              document_key.$: $.detail.object.key
            ResultPath: null
            Next: PartitionFile
          RouteDocument:
            Type: Task
            Resource: !GetAtt DocumentRouterFunction.Arn
            Parameters:
              bucket.$: $.detail.bucket.name
              key.$: $.detail.object.key
            Next: ParallelProcessing
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.error"
                Next: UpdateStatusError
          ParallelProcessing:
            Type: Parallel
            Branches:
              - StartAt: ProcessTextChunks
                States:
                  ProcessTextChunks:
                    Type: Map
                    Iterator:
                      StartAt: ProcessText
                      States:
                        ProcessText:
                          Type: Task
                          Resource: !GetAtt TextProcessingFunction.Arn
                          # ResultPath: null  # REMOVE to collect output
                          End: true
                    InputPath: $.texts
                    End: true
              - StartAt: ProcessImageChunks
                States:
                  ProcessImageChunks:
                    Type: Map
                    Iterator:
                      StartAt: ProcessImage
                      States:
                        ProcessImage:
                          Type: Task
                          Resource: !GetAtt ImageProcessingFunction.Arn
                          # ResultPath: null  # REMOVE to collect output
                          End: true
                    InputPath: $.images
                    End: true
            ResultPath: $.ProcessedData
            Next: AggregateAndSaveResults
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.error"
                Next: UpdateStatusError
          AggregateAndSaveResults:
            Type: Task
            Resource: !GetAtt AggregationFunction.Arn
            InputPath: $.ProcessedData
            ResultPath: null
            Next: UpdateStatusComplete
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.error"
                Next: UpdateStatusError
          UpdateStatusComplete:
            Type: Task
            Resource: !GetAtt StatusUpdaterFunction.Arn
            Parameters:
              status: complete
              document_key.$: $.detail.object.key
            ResultPath: null
            End: true
          UpdateStatusError:
            Type: Task
            Resource: !GetAtt StatusUpdaterFunction.Arn
            Parameters:
              status: error
              document_key.$: $.detail.object.key
            ResultPath: null
            End: true
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref StatusUpdaterFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PartitioningFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TextProcessingFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ImageProcessingFunction

  # EventBridge Rule to trigger Step Function on S3 uploads
  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Step Function when files are uploaded to RawFilesBucket"
      EventPattern:
        source: ["aws.s3"]
        detail-type: ["Object Created"]
        detail:
          bucket:
            name: [!Ref RawFilesBucket]
          object:
            key:
              - prefix: ""
      State: ENABLED
      Targets:
        - Arn: !Ref IngestionStateMachine
          Id: "IngestionStateMachineTarget"
          RoleArn: !GetAtt EventBridgeExecutionRole.Arn

  # IAM Role for EventBridge to execute Step Functions
  EventBridgeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref IngestionStateMachine

  # Lambda Functions
  PresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/presigned_url/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          RAW_FILES_BUCKET: !Ref RawFilesBucket
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref RagApi
            Path: /generate-upload-url
            Method: post

  # Router Lambda - analyzes document complexity and routes to appropriate processor
  DocumentRouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/router/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Timeout: 60  # 1 minute for analysis
      MemorySize: 512  # Lightweight
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          LIGHT_LAMBDA_NAME: !Ref LightPartitionFunction
          HEAVY_LAMBDA_NAME: !Ref PartitioningFunction

  # Light Partition Lambda - for simple documents (no detectron2)
  LightPartitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/partition_light/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Timeout: 300  # 5 minutes
      MemorySize: 1024  # Lightweight
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket
          OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint

  # Heavy Partition Lambda - for complex documents (with detectron2)
  PartitioningFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/partition
    Properties:
      PackageType: Image
      Timeout: 900  # 15 minutes - maximum allowed
      MemorySize: 3072  # 3GB - more headroom for 4.57GB image
      EphemeralStorage:  # More /tmp space for large files
        Size: 2048  # 2GB temporary storage
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket
          OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint

  TextProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/text_processor/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint

  ImageProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/image_processor/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint

  # QueryFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/query/
  #     Handler: handler.lambda_handler
  #     Runtime: python3.10
  #     Role: !GetAtt ProcessingLambdaRole.Arn
  #     Environment:
  #       Variables:
  #         OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint
  #     Events:
  #       Api:
  #         Type: HttpApi
  #         Properties:
  #           ApiId: !Ref RagApi
  #           Path: /query
  #           Method: post

  AggregationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/aggregator/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket

  StatusUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/status_updater/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable

  GetStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_status/
      Handler: handler.lambda_handler
      Runtime: python3.10
      Role: !GetAtt ProcessingLambdaRole.Arn
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref RagApi
            Path: /status/{document_key}
            Method: get

  # API Gateway
  RagApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key

  # API Routes are now defined as Events in the Lambda functions

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${RagApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"