AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless RAG Application with OpenSearch and Bedrock

Parameters:
  StackName:
    Type: String
    Default: rag-serverless-stack
    Description: Name of the CloudFormation stack

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: OpenSearchServerlessAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: '*'

  # OpenSearch Serverless Collection
  RagVectorCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: rag-vector-collection
      Type: VECTORSEARCH
      Description: Vector collection for RAG application

  # OpenSearch Serverless Access Policy
  CollectionAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: rag-collection-access-policy
      Type: data
      Policy: !Sub |
        [{
          "Rules": [
            {
              "Resource": ["collection/rag-vector-collection"],
              "Permission": ["aoss:CreateCollectionItems"],
              "ResourceType": "collection"
            },
            {
              "Resource": ["index/rag-vector-collection/*"],
              "Permission": ["aoss:CreateIndex", "aoss:DeleteIndex", "aoss:UpdateIndex", "aoss:DescribeIndex", "aoss:ReadDocument", "aoss:WriteDocument"],
              "ResourceType": "index"
            }
          ],
          "Principal": ["${LambdaExecutionRole.Arn}"]
        }]

  # Lambda function for ingestion
  IngestionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StackName}-ingestion"
      Code: src/ingestion/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint

  # Lambda function for query
  QueryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StackName}-query"
      Code: src/query/
      Handler: handler.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !GetAtt RagVectorCollection.CollectionEndpoint

  # API Gateway HTTP API
  RagApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${StackName}-api"
      Description: API for RAG application
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref RagApi
      StageName: $default
      AutoDeploy: true

  # Lambda permissions for API Gateway
  IngestionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IngestionFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${RagApi}/*/*"

  QueryFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt QueryFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${RagApi}/*/*"

  # API Gateway Routes
  AddContextRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RagApi
      RouteKey: "POST /add-context"
      AuthorizationType: NONE
      Target: !Sub "integrations/${AddContextIntegration}"

  QueryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RagApi
      RouteKey: "POST /query"
      AuthorizationType: NONE
      Target: !Sub "integrations/${QueryIntegration}"

  # API Gateway Integrations
  AddContextIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RagApi
      Description: Integration for add-context endpoint
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IngestionFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  QueryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RagApi
      Description: Integration for query endpoint
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${RagApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  CollectionEndpoint:
    Description: OpenSearch Serverless collection endpoint
    Value: !GetAtt RagVectorCollection.CollectionEndpoint
    Export:
      Name: !Sub "${AWS::StackName}-CollectionEndpoint"